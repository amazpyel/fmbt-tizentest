# filemanager.aal is a model & adapter defined in AAL/Python.
# fMBT automatically generates and executes tests against
# the Tizen Phone application, using inputs and state
# verifications (tags) defined in this file.

# Based on https://github.com/askervin/fmbt-androidtest

# Author: Oleksandr Pylkevych o.pylkevych@gmail.com

# preview-image-path: bitmaps

aal "tizen_filemanager" {
    language "python" {
        import fmbttizen
        import time

        def waitTransition():
            time.sleep(.75)
    }

    variables { fg_app, fm_view, files }

    initial_state {
        # The "state" of the model is a unique combination of
        # values of the variables defined above.

        # fg_app is the foreground application, "homescreen" or "file manager"
        fg_app = "homescreen"
        
        #fm_view is the main (first view) of file manager application after launch
        fm_view = "main"
    }

    adapter_init {
        # Global variable "d" is the Device instance connected
        # to the emulator.
        global d
        d = fmbttizen.Device()
        d.enableVisualLog("deviceLog.html", timeFormat="%T.%f")

        time.sleep(2)
        d.refreshScreenshot()

        # If the device is in lockscreen, unlock it.
        if d.verifyBitmap("bitmaps/lockscreen-lock.png"):
            d.swipe((0.1, 0.8), "east")
            waitTransition()
            d.pressHome()
            waitTransition()
            d.refreshScreenshot()
    }

    adapter_exit {
        d.close()
    }

    tag "homescreen" {
         # Tags are associated to states where the guard returns True.
        guard() { return fg_app == "homescreen" }
        # Tagged states are verified when entered by executing
        # adapter blocks of all tags in the state.
        adapter() {
            assert d.waitBitmap("bitmaps/home-fm.png"), "not in home screen!"
        }

        input "launch filemanager" {
            # A test step (like "launch phone") can be tested when
            # its guards and guards of outer blocks (like "homescreen")
            # return True. If a guard block is not defined, the default
            # for it is "return True". That is, "launch phone" can be
            # tested whenever in a state with the "homescreen" tag.
            adapter() {
                # The adapter block executes the test step. In this case,
                # it gives input "launch filemanager" to the emulator.
                d.tapBitmap("bitmaps/home-fm.png")
                # Instead of only tapping the dialer icon at the
                # homescreen, this adapter continues to the state where
                # the device is ready for next state verification. That
                # is, wait for a while and update the screenshot after
                # that. This design is used in all adapter blocks in
                # this example.
                waitTransition()
                d.refreshScreenshot()
            }
            body() {
                # If the adapter block has been successfully executed
                # (no exceptions, not returning False or observed actions),
                # the state of the model is changed by the body block.
                fg_app = "filemanager"
                fm_view = "main"
            }
        }
    }

    tag "filemanager" {
        guard() { return fg_app == "filemanager" }
        adapter() {
            if fm_view == "main":
                assert d.waitOcrText("Phone", preprocess="")
        }

        input "create folder" {
            guard() {
                return (fm_view in ["main", "downloads-clear"])
            }
            adapter() {
                d.tapOcrText("Phone")
                waitTransition()
                d.refreshScreenshot()
                d.tapOcrText("Downloads")
                waitTransition()
                d.refreshScreenshot()
                if d.verifyBitmap("bitmaps/edit-dimmed.png"):
                    d.tapBitmap("bitmaps/more-button.png")
                    waitTransition()
                    d.refreshScreenshot()
                    d.tapOcrText("Create")
                    waitTransition()
                    d.refreshScreenshot()
                    d.tapBitmap("bitmaps/ok-button.png")
                    waitTransition()
                    d.refreshScreenshot()
                else:
                    d.tapBitmap("bitmaps/more-button.png")
                    waitTransition()
                    d.refreshScreenshot()
                    d.tapOcrText("Create")
                    waitTransition()
                    d.refreshScreenshot()
                    d.tapBitmap("bitmaps/ok-button.png")
                    waitTransition()
                    d.refreshScreenshot()
                    assert d.verifyBitmap("bitmaps/already-exists.png")
                    d.pressBack()
                    waitTransition()
                    d.refreshScreenshot()
            }
            body() {
                fm_view = "downloads"
                files = 1
            }
        }

        input "delete all" {
            guard() { return fm_view == "downloads"}
            adapter() {
                if not d.verifyBitmap("bitmaps/edit-dimmed.png"):
                    d.tapBitmap("bitmaps/edit.png")
                    waitTransition()
                    d.refreshScreenshot()
                    d.tapOcrText("Select")
                    waitTransition()
                    d.refreshScreenshot()
                    d.tapBitmap("bitmaps/delete.png")
                    assert d.waitBitmap("bitmaps/delete-confirmation.png")
                    d.refreshScreenshot()
                    d.tapBitmap("bitmaps/ok-button.png")
                    waitTransition()
                    d.refreshScreenshot()
                    assert d.verifyBitmap("bitmaps/edit-dimmed.png")
                else:
                    assert d.verifyBitmap("bitmaps/edit-dimmed.png")
            }
            body() {
                fm_view == "downloads-clear"
                files = 0
            }
        }
    }

    input "return to homescreen" {
        guard() { return fg_app != "homescreen" }
            adapter() {
                d.pressHome()
                waitTransition()
                d.refreshScreenshot()
                d.pressHome(hold=2.0)
                waitTransition()
                d.refreshScreenshot()
                d.tapBitmap("bitmaps/clear-all.png")
                waitTransition()
                d.refreshScreenshot()
            }
            body() { fg_app = "homescreen" }
    }
}
